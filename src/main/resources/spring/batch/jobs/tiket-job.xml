<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <bean id="employee" class="com.tiket.model.Employee" scope="prototype" />
    <bean id="customer" class="com.tiket.model.Customer" scope="prototype" />
    <bean id="shipping_method" class="com.tiket.model.ShippingMethod" scope="prototype" />
    <bean id="product" class="com.tiket.model.Product" scope="prototype" />
    <bean id="order_detail" class="com.tiket.model.OrderDetail" scope="prototype" />
    <bean id="order" class="com.tiket.model.Order" scope="prototype" />

	<batch:job id="tiketJob">
<!-- 		<batch:step id="step1" next="step2">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="mysqlItemWriter"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step> -->
		<batch:step id="step2" next="step3">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderEmployee" writer="mysqlItemWriterEmployee"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step3" next="step4">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderCustomer" writer="mysqlItemWriterCustomer"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step4" next="step5">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderShippingMethods" writer="mysqlItemWriterShippingMethod"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step5" next="step6">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderProduct" writer="mysqlItemWriterProduct"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step6" next="step7" >
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderOrder" writer="mysqlItemWriterOrder" 
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step7" >
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderOrderDetail" writer="mysqlItemWriterOrderDetail"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		
	</batch:job>



<!-- ============= -->
	<bean id="cvsFileItemReaderEmployee" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/Employees.csv" />

		<property name="linesToSkip" value="1"/>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
						<property name="names" value="employeeID,firstName,lastName,tilte,workPhone" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
				    <!-- return back to reader, rather than a mapped object. -->
				    <!--
				    	<bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
				    -->
				      
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="employee" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean>
	
	<bean id="mysqlItemWriterEmployee"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into employees(employeeid,firstname,lastname,title,workphone) values (:employeeID,:firstName,:lastName,:title,:workPhone)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>


<!-- ============= Customer ============= ============= ============= ============= ============= -->
	<bean id="cvsFileItemReaderCustomer" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/Customers.csv" />

		<property name="linesToSkip" value="1"/>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
						<property name="names" value="customerID,companyName,firstName,lastName,billingAddress,city,stateOrProvince,zipCode,email,companyWebsite,phoneNumber,faxNumber,shipAddress,shipCity,shipStateOrProvince,shipZipCode,shipPhoneNumber" />
					</bean>
				</property>

				<property name="fieldSetMapper">
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="customer" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean>
	
	<bean id="mysqlItemWriterCustomer"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into customers(customerID,companyname,firstname,lastname,billingaddress,city,stateorprovince,zipcode,email,companywebsite,phonenumber,faxnumber,shipaddress,shipcity,shipstateorprovince,shipzipcode,shipphonenumber) values (:customerID,:companyName,:firstName,:lastName,:billingAddress,:city,:stateOrProvince,:zipCode,:email,:companyWebsite,:phoneNumber,:faxNumber,:shipAddress,:shipCity,:shipStateOrProvince,:shipZipCode,:shipPhoneNumber)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

<!-- ================================== Shipping Method=========================== -->
	<bean id="cvsFileItemReaderShippingMethods" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/ShippingMethods.csv" />

		<property name="linesToSkip" value="1"/>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
						<property name="names" value="shippingMethodID,shippingMethod" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
				    <!-- return back to reader, rather than a mapped object. -->
				    <!--
				    	<bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
				    -->
				      
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="shipping_method" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean>


	<bean id="mysqlItemWriterShippingMethod"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into shipping_methods (shippingMethodID, shippingMethod) values (:shippingMethodID, :shippingMethod)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

<!-- ================================== Product=========================== -->

	<bean id="cvsFileItemReaderProduct" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/Products.csv" />

		<property name="linesToSkip" value="1"/>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
						<property name="names" value="productID, productName, unitPrice, inStock" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="product" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean>


	<bean id="mysqlItemWriterProduct"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into products (productID, productName, unitPrice, inStock) values (:productID, :productName, :unitPrice, :inStock)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

<!-- ================================== Order Detail=========================== -->
	<bean id="cvsFileItemReaderOrderDetail" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/OrderDetails.csv" />

		<property name="linesToSkip" value="1"/>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
						<property name="names" value="orderDetailID, orderID, productID, quantity, unitPrice, discount" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="order_detail" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean>

	<bean id="mysqlItemWriterOrderDetail"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into order_details (orderDetailID, orderID, productID, quantity, unitPrice, discount) values (:orderDetailID, :orderID, :productID, :quantity, :unitPrice, :discount)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

<!-- ================================== Order =========================== -->
	<bean id="cvsFileItemReaderOrder" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/Orders.csv" />

		<property name="linesToSkip" value="1"/>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";" />
						<property name="strict" value="false"/>
						<property name="names" value="orderID,customerID,employeeID,orderDate,purchaseOrderNumber,shipDate,shippingMethodID,freightCharge,taxes,paymentReceived,comment" />
					</bean>
				</property>

				<property name="fieldSetMapper">
				    
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="order" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean>

	<bean id="mysqlItemWriterOrder"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into orders (orderID,customerID,employeeID,orderdate,purchaseordernumber,shipdate,shippingmethodID,freightcharge,taxes,paymentreceived,comment) values (:orderID,:customerID,:employeeID,:orderDate,:purchaseOrderNumber,:shipDate,:shippingMethodID,:freightCharge,:taxes,:paymentReceived,:comment)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

</beans>

